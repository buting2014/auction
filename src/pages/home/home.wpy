<style lang="scss" src="./home.scss">
</style>

<template lang="pug">
  view.home
    view.top-title 创建拍卖
    view
      view.sub-title 商品图片
      uploadImg
    view
      repeat(for="{{inputList}}",index="index",item="item",key="key")
        view.sub-title {{item.title}}
        inputItem(
          @input.user="handlerInputVal"
          @blur.user="handlerblur"
          @clear.user="handlerclear"
          :item.sync="item"
        )
    view 
      view.sub-title 拍卖时间
      view.time-wrap
        picker.date-time-wrap(mode="multiSelector",value="{{auctionTimeIndex}}",range="{{auctionTimeArr}}",bindchange="bindTimePickerChange")
          view {{ isTimeShow ? (auctionTimeArr[0][auctionTimeIndex[0]]+'天'+auctionTimeArr[1][auctionTimeIndex[1]]+'时'+auctionTimeArr[2][auctionTimeIndex[2]]+'分') : '开拍时间' }}
        picker.long-time-wrap(value="{{aucLongIdnex}}",range="{{aucLongArr}}",bindchange="bindAucLongChange")
          view {{ isLongShow ? aucLongArr[aucLongIdnex] : '拍卖时长' }}
    view 
      view.sub-title 商品详情
      textarea.texta-style(placeholder="填入商品详情",value="{{detailVal}}",@input="handlerDetail")
    view.bottom-btn-wrap
      view.home-pre(@tap="handlerPre")  预览
      view.home-save(@tap="handlerSave") 保存商品
      view.home-pub(@tap="handlerPub") 发布拍卖
</template>

<script>
  import wepy from 'wepy';
  import moment from 'moment';
  import deepClone from '../../utils/deep-clone';
  import pageBaseMixin from '../../mixins/page-base-mixin.js';
  import defaultData from './data.js';
  import UploadImg from '../../components/upload-img/upload-img';
  import InputItem from '../../components/input-item/input-item';
  // import * as api from '../../service';

  export default class Home extends wepy.page {
    config = {
      navigationBarTitleText: 'Home',
      navigationBarTextStyle: 'black',//导航栏标题颜色，仅支持 black/white
      navigationBarBackgroundColor: '#fff', //导航栏背景颜色，如"#000000"
      backgroundColor: '#ffffff', //窗口的背景色
      backgroundTextStyle: 'dark', //下拉背景字体、loading 图的样式，仅支持 dark/light
      enablePullDownRefresh: false, //是否开启下拉刷新，详见页面相关事件处理函数。
      onReachBottomDistance: 50 // 页面上拉触底事件触发时距页面底部距离，单位为px
    }

    components = {
      uploadImg : UploadImg,
      inputItem : InputItem,
    };

    mixins = [pageBaseMixin];

    defaultData = {};

    // data = deepClone(defaultData);

    data={
      auctionTimeIndex: [0,0,0],
      auctionTimeArr: [[],[],[]],
      isTimeShow: false,
      isLongShow: false,
      aucLongIdnex: 0,
      aucLongArr:[],
      inputList: [
        {
          placeholder: '请输入商品标题',
          title:'商品名称',
          type:'text',
          isShowP : false,
          index: 0,
          value:null
        },
        {
          placeholder: '请输入起拍价',
          title:'起拍价',
          type:'digit',
          isShowP : false,
          index: 1,
          value:null
        },
        {
          placeholder: '请输入商品最高价',
          title:'商品最高价',
          type:'digit',
          isShowP : false,
          index: 2,
          value:null
        },
        {
          placeholder: '加价幅度默认为1元',
          title:'加价幅度',
          type:'digit',
          isShowP : false,
          index: 3,
          value:null
        },
      ],
      detailVal: ''
    }

    computed = {};

    watch = {};

    methods = {
      bindTimePickerChange(e){
        console.log('picker发送选择改变，携带值为', e.detail.value,e.detail.value[0] || e.detail.value[1] || e.detail.value[2])
        this.updateData({
          auctionTimeIndex: e.detail.value,
          isTimeShow : true
        })
      },
      bindAucLongChange(e){
        console.log('当前选中值的索引',e.detail.value);
        this.updateData({
          aucLongIdnex: e.detail.value,
          isLongShow: true
        })
      },
      handlerInputVal(e, index){
        // console.log(e.detail.value,'改变值啦', index);
        this.data.inputList[index].isShowP = true
        // console.log(this.data.inputList[index].isShowP)
        this.updateData({
          // inputList
        })
      },
      handlerblur(e, index){
        // console.log(e.detail.value,'改变值了哦哈哈哈', index);
        this.data.inputList[index].value = e.detail.value;
        this.data.inputList[index].isShowP = false;
      },
      handlerclear(e, index){
        console.log(e,'清除数据');
        this.data.inputList[index].isShowP = true;
        this.data.inputList[index].value = null
      },
      handlerDetail(e){
        this.updateData({
          detailVal : e.detail.value
        })
      },
      handlerPre(e){
        console.log(123)
      },
      handlerSave(e){
        console.log('hahhah',this.data,this.data.inputList);
        let params = {
          starting_price:this.data.inputList[1].value,
          reserve_price:this.data.inputList[2].value,
          ceiling_price:this.data.inputList[3].value,
          item_name:this.data.inputList[0].value,
          description:[{
             type:'',
             content:this.data.detailVal   
          }]
        }
        console.log(JSON.stringify(params))
        wepy.login({
          success : res => {
            if(res.code){
              wepy.request({
                url : `http://api.pivotal-china.com/api/items/save`,
                method:'post',
                data : JSON.stringify(params),
                success:res => {
                  console.log(res.data)
                  wepy.redirectTo({url: '../detail/detail?id=' + res.data.result.id })
                }
              })
            }else{
              console.log('获取用户登录态失败！' + res.errMsg)
            }
          }
        })
      },
      handlerPub(e){
        let end_time = moment().add(this.data.auctionTimeIndex[0],'day').add(this.data.auctionTimeIndex[1],'hours').add(this.data.auctionTimeIndex[2],'minutes');
        let params = {
          starting_price:this.data.inputList[1].value,
          reserve_price:this.data.inputList[2].value,
          ceiling_price:this.data.inputList[3].value,
          item_name:this.data.inputList[0].value,
           description:[{
             type:'',
             content:this.data.detailVal   
          }],
          start_time:Date.parse(new Date()),
          end_time:Date.parse(end_time),
        }
        console.log(params)
        wepy.login({
          success : res => {
            if(res.code){
              wepy.request({
                url : `http://api.pivotal-china.com/api/items/createnew`,
                method:'post',
                data : JSON.stringify(params),
                success:res => {
                  console.log(res.data)
                  // wepy.redirectTo({url: '../detail/detail?id=' + res.data.result.id })
                }
              })
            }else{
              console.log('获取用户登录态失败！' + res.errMsg)
            }
          }
        })
      }
    };

    events = {};

    onPrefetch(params, data) {} // 预加载

    onLoad(params, data) {
      for(let i = 0; i <= 31 ; i++){
        this.data.auctionTimeArr[0].push( i < 10 ? '0'+i : i)
      }
      for(let i = 0; i <= 23 ; i++){
        this.data.auctionTimeArr[1].push(i < 10 ? '0'+i : i)
      }
      for(let i = 0; i <= 59 ; i++){
        this.data.auctionTimeArr[2].push(i < 10 ? '0'+i : i)
      }
      for(let i = 1; i <= 24; i++){
        this.data.aucLongArr.push(i)
      }
      let auctionTimeOpt = this.data.auctionTimeIndex;
      this.data.isTimeShow = (auctionTimeOpt[0] || auctionTimeOpt[1] || auctionTimeOpt[2]) ? true : false;
      console.log( auctionTimeOpt[0] || auctionTimeOpt[1] || auctionTimeOpt[2] , (auctionTimeOpt[0] || auctionTimeOpt[1] || auctionTimeOpt[2]) ? true : false  );
    }	//Function	生命周期函数--监听页面加载

    onShow() {}	//	Function	生命周期函数--监听页面显示

    onRoute() {} // 只有在页面路由时才会触发（包括第一次进入页面）

    onReady() {}	//	Function	生命周期函数--监听页面初次渲染完成

    onHide() {}	//	Function	生命周期函数--监听页面隐藏

    onUnload() {}	//	Function	生命周期函数--监听页面卸载

    onPullDownRefresh() {}	//	Function	页面相关事件处理函数--监听用户下拉动作

    onReachBottom() {}	//	Function	页面上拉触底事件的处理函数

    onShareAppMessage() {}	//	Function	用户点击右上角转发

    onPageScroll() {}	//页面滚动触发事件的处理函数
  }
</script>
